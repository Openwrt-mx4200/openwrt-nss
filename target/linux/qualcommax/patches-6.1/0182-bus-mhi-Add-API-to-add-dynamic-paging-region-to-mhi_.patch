From b71e291dd6e30a1e9462bda46ff7bf383e15b451 Mon Sep 17 00:00:00 2001
From: Vignesh Viswanathan <quic_viswanat@quicinc.com>
Date: Tue, 11 Apr 2023 14:58:48 +0530
Subject: [PATCH 182/281] bus: mhi: Add API to add dynamic paging region to
 mhi_buf table

Add an API to add dynamic paging region to the MHI buffer table.
This will ensure while collecting ramdump, dynamic paging region is
collected along with FW image segments.

Also, always copy mhi_buf segment length to BHI vector table to FW
instead of actual size for the last segment to ensure all MHI buffers
are aligned to segment size in the dumps.

Change-Id: Ib0b3ec246bafe0deee75fe2df3f3a14eab41dff1
Signed-off-by: Vignesh Viswanathan <quic_viswanat@quicinc.com>
---
 drivers/bus/mhi/host/boot.c     | 96 +++++++++++++++++++++++++++------
 drivers/bus/mhi/host/init.c     |  9 ++--
 drivers/bus/mhi/host/internal.h |  5 +-
 include/linux/mhi.h             | 11 ++++
 4 files changed, 100 insertions(+), 21 deletions(-)

diff --git a/drivers/bus/mhi/host/boot.c b/drivers/bus/mhi/host/boot.c
index 26d0eddb1477..47faa6ab6a21 100644
--- a/drivers/bus/mhi/host/boot.c
+++ b/drivers/bus/mhi/host/boot.c
@@ -299,22 +299,72 @@ static int mhi_fw_load_bhi(struct mhi_controller *mhi_cntrl,
 }
 
 void mhi_free_bhie_table(struct mhi_controller *mhi_cntrl,
-			 struct image_info *image_info)
+			 struct image_info *image_info, bool is_fbc)
 {
 	int i;
 	struct mhi_buf *mhi_buf = image_info->mhi_buf;
 
-	for (i = 0; i < image_info->entries; i++, mhi_buf++)
+	for (i = 0; i < image_info->entries; i++, mhi_buf++) {
+		/* For FBC image, element mhi_buf[img_info->entries - 2] points
+		 * to Dynamic paging region and it should not be freed.
+		 */
+		if (is_fbc && i == (image_info->entries - 2))
+			continue;
+
 		dma_free_coherent(mhi_cntrl->cntrl_dev, mhi_buf->len,
 				  mhi_buf->buf, mhi_buf->dma_addr);
+	}
 
 	kfree(image_info->mhi_buf);
 	kfree(image_info);
 }
 
+int mhi_update_bhie_table_for_dyn_paging(struct mhi_controller *mhi_cntrl,
+					 void *va, phys_addr_t pa,
+					 size_t size)
+{
+	struct image_info *image_info = mhi_cntrl->fbc_image;
+	int i, segments;
+	struct mhi_buf *mhi_buf;
+	struct bhi_vec_entry *bhi_vec;
+	struct device *dev = &mhi_cntrl->mhi_dev->dev;
+
+	if (!image_info) {
+		dev_err(dev, "FBC Image is NULL\n");
+		return -EINVAL;
+	}
+
+	segments = image_info->entries;
+
+	/* Find the free entry in bhi_vec table for dynamic paging region */
+	bhi_vec = &image_info->bhi_vec[0];
+	for (i = 0; (i < segments - 1); i++) {
+		if (!bhi_vec->dma_addr)
+			break;
+		bhi_vec++;
+	}
+
+	if (i == (segments - 1)) {
+		dev_err(dev, "No space in Vector Table\n");
+		return -ENOMEM;
+	}
+
+	bhi_vec->dma_addr = pa;
+	bhi_vec->size = size;
+
+	/* mhi_buf[segments - 2] is reserved Dynamic Paging region */
+	mhi_buf = &image_info->mhi_buf[segments - 2];
+	mhi_buf->buf = va;
+	mhi_buf->dma_addr = pa;
+	mhi_buf->len = size;
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(mhi_update_bhie_table_for_dyn_paging);
+
 int mhi_alloc_bhie_table(struct mhi_controller *mhi_cntrl,
 			 struct image_info **image_info,
-			 size_t alloc_size)
+			 size_t alloc_size, bool is_fbc)
 {
 	size_t seg_size = mhi_cntrl->seg_len;
 	int segments = DIV_ROUND_UP(alloc_size, seg_size) + 1;
@@ -322,6 +372,10 @@ int mhi_alloc_bhie_table(struct mhi_controller *mhi_cntrl,
 	struct image_info *img_info;
 	struct mhi_buf *mhi_buf;
 
+	/* Allocate one extra entry for Dynamic Pageable in FBC */
+	if (is_fbc)
+		segments++;
+
 	img_info = kzalloc(sizeof(*img_info), GFP_KERNEL);
 	if (!img_info)
 		return -ENOMEM;
@@ -337,16 +391,28 @@ int mhi_alloc_bhie_table(struct mhi_controller *mhi_cntrl,
 	for (i = 0; i < segments; i++, mhi_buf++) {
 		size_t vec_size = seg_size;
 
-		/* Vector table is the last entry */
-		if (i == segments - 1)
-			vec_size = sizeof(struct bhi_vec_entry) * i;
+		if (is_fbc && (i == segments - 2)) {
+			/* Initialize an entry for Dynamic paging region which
+			 * would be updated later in
+			 * mhi_update_bhie_table_for_dyn_paging
+			 */
+			vec_size = 0;
+			mhi_buf->buf = NULL;
+			mhi_buf->dma_addr = 0;
+		} else {
+			/* Vector table is the last entry */
+			if (i == segments - 1)
+				vec_size = sizeof(struct bhi_vec_entry) * i;
+
+			mhi_buf->len = vec_size;
+			mhi_buf->buf = dma_alloc_coherent(mhi_cntrl->cntrl_dev,
+							  vec_size,
+							  &mhi_buf->dma_addr,
+							  GFP_KERNEL);
+			if (!mhi_buf->buf)
+				goto error_alloc_segment;
+		}
 
-		mhi_buf->len = vec_size;
-		mhi_buf->buf = dma_alloc_coherent(mhi_cntrl->cntrl_dev,
-						  vec_size, &mhi_buf->dma_addr,
-						  GFP_KERNEL);
-		if (!mhi_buf->buf)
-			goto error_alloc_segment;
 	}
 
 	img_info->bhi_vec = img_info->mhi_buf[segments - 1].buf;
@@ -380,7 +446,7 @@ static void mhi_firmware_copy(struct mhi_controller *mhi_cntrl,
 		to_cpy = min(remainder, mhi_buf->len);
 		memcpy(mhi_buf->buf, buf, to_cpy);
 		bhi_vec->dma_addr = mhi_buf->dma_addr;
-		bhi_vec->size = to_cpy;
+		bhi_vec->size = mhi_buf->len;
 
 		buf += to_cpy;
 		remainder -= to_cpy;
@@ -480,7 +546,7 @@ void mhi_fw_load_handler(struct mhi_controller *mhi_cntrl)
 	 */
 	if (mhi_cntrl->fbc_download) {
 		ret = mhi_alloc_bhie_table(mhi_cntrl, &mhi_cntrl->fbc_image,
-					   firmware->size);
+					   firmware->size, true);
 		if (ret) {
 			release_firmware(firmware);
 			goto error_fw_load;
@@ -505,7 +571,7 @@ void mhi_fw_load_handler(struct mhi_controller *mhi_cntrl)
 
 error_ready_state:
 	if (mhi_cntrl->fbc_download) {
-		mhi_free_bhie_table(mhi_cntrl, mhi_cntrl->fbc_image);
+		mhi_free_bhie_table(mhi_cntrl, mhi_cntrl->fbc_image, true);
 		mhi_cntrl->fbc_image = NULL;
 	}
 
diff --git a/drivers/bus/mhi/host/init.c b/drivers/bus/mhi/host/init.c
index bf672de35131..4accbb468549 100644
--- a/drivers/bus/mhi/host/init.c
+++ b/drivers/bus/mhi/host/init.c
@@ -1135,13 +1135,14 @@ int mhi_prepare_for_power_up(struct mhi_controller *mhi_cntrl)
 		 * Allocate RDDM table for debugging purpose if specified
 		 */
 		mhi_alloc_bhie_table(mhi_cntrl, &mhi_cntrl->rddm_image,
-				     mhi_cntrl->rddm_size);
+				     mhi_cntrl->rddm_size, false);
 		if (mhi_cntrl->rddm_image) {
 			ret = mhi_rddm_prepare(mhi_cntrl,
 					       mhi_cntrl->rddm_image);
 			if (ret) {
 				mhi_free_bhie_table(mhi_cntrl,
-						    mhi_cntrl->rddm_image);
+						    mhi_cntrl->rddm_image,
+						    false);
 				goto error_reg_offset;
 			}
 		}
@@ -1164,12 +1165,12 @@ EXPORT_SYMBOL_GPL(mhi_prepare_for_power_up);
 void mhi_unprepare_after_power_down(struct mhi_controller *mhi_cntrl)
 {
 	if (mhi_cntrl->fbc_image) {
-		mhi_free_bhie_table(mhi_cntrl, mhi_cntrl->fbc_image);
+		mhi_free_bhie_table(mhi_cntrl, mhi_cntrl->fbc_image, true);
 		mhi_cntrl->fbc_image = NULL;
 	}
 
 	if (mhi_cntrl->rddm_image) {
-		mhi_free_bhie_table(mhi_cntrl, mhi_cntrl->rddm_image);
+		mhi_free_bhie_table(mhi_cntrl, mhi_cntrl->rddm_image, false);
 		mhi_cntrl->rddm_image = NULL;
 	}
 
diff --git a/drivers/bus/mhi/host/internal.h b/drivers/bus/mhi/host/internal.h
index 01fd10a399b6..1eacabeb898e 100644
--- a/drivers/bus/mhi/host/internal.h
+++ b/drivers/bus/mhi/host/internal.h
@@ -274,9 +274,10 @@ int mhi_destroy_device(struct device *dev, void *data);
 void mhi_create_devices(struct mhi_controller *mhi_cntrl);
 
 int mhi_alloc_bhie_table(struct mhi_controller *mhi_cntrl,
-			 struct image_info **image_info, size_t alloc_size);
+			 struct image_info **image_info, size_t alloc_size,
+			 bool is_fbc);
 void mhi_free_bhie_table(struct mhi_controller *mhi_cntrl,
-			 struct image_info *image_info);
+			 struct image_info *image_info, bool is_fbc);
 
 /* Power management APIs */
 enum mhi_pm_state __must_check mhi_tryset_pm_state(
diff --git a/include/linux/mhi.h b/include/linux/mhi.h
index a5441ad33c74..e7e4da6b7313 100644
--- a/include/linux/mhi.h
+++ b/include/linux/mhi.h
@@ -772,6 +772,17 @@ void mhi_unprepare_from_transfer(struct mhi_device *mhi_dev);
  */
 int mhi_poll(struct mhi_device *mhi_dev, u32 budget);
 
+/**
+ * mhi_update_bhie_table_for_dyn_paging - Add the dynamic paging memory region
+ * into the mhi_buf table.
+ * @mhi_cntrl: MHI controller
+ * @va: Virtual Address of the memory region
+ * @pa: Physical Address of the memory region
+ * @size: Size of the memory region
+ */
+int mhi_update_bhie_table_for_dyn_paging(struct mhi_controller *mhi_cntrl,
+					 void *va, phys_addr_t pa,
+					 size_t size);
 /**
  * mhi_queue_dma - Send or receive DMA mapped buffers from client device
  *                 over MHI channel
-- 
2.17.1

